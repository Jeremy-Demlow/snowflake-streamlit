name: Deploy Streamlit Apps

on:
  push:
    branches: [ main, develop ]
    paths: [ 'apps/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'apps/**' ]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Deployment mode'
        required: true
        default: 'changed'
        type: choice
        options:
        - changed
        - all
        - single
      app_name:
        description: 'App name (for single mode)'
        required: false
        type: string
      branch:
        description: 'Branch to deploy from'
        required: false
        default: 'main'
        type: string

env:
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
  SNOWFLAKE_CONNECTIONS_STREAMLIT_ENV_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

jobs:
  validate:
    name: Validate Apps
    runs-on: ubuntu-latest
    outputs:
      apps-changed: ${{ steps.changes.outputs.apps }}
      apps-list: ${{ steps.changes.outputs.apps-list }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
        pip install -r requirements.txt
    
    - name: Validate apps
      id: validate
      run: |
        python scripts/ci_deploy.py --validate-only
    
    - name: Check for changes
      id: changes
      run: |
        # Get changed apps
        changed_apps=$(python scripts/ci_deploy.py --mode changed --dry-run 2>&1 | grep "Deploying changed apps:" | sed 's/.*Deploying changed apps: \[\(.*\)\]/\1/' | tr -d "'" | tr ',' '\n' | tr -d ' ')
        
        if [ -z "$changed_apps" ]; then
          echo "No apps changed"
          echo "apps=false" >> $GITHUB_OUTPUT
          echo "apps-list=" >> $GITHUB_OUTPUT
        else
          echo "Changed apps: $changed_apps"
          echo "apps=true" >> $GITHUB_OUTPUT
          echo "apps-list=$changed_apps" >> $GITHUB_OUTPUT
        fi

  deploy-pr:
    name: Deploy for PR (Dry Run)
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' && needs.validate.outputs.apps-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
        pip install -r requirements.txt
    
    - name: Dry run deployment
      run: |
        echo "🧪 Testing deployment for PR #${{ github.event.number }}"
        python scripts/ci_deploy.py --mode changed --dry-run
        echo "✅ Deployment validation passed!"

  deploy-main:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.validate.outputs.apps-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
        pip install -r requirements.txt
    
    - name: Deploy changed apps
      run: |
        echo "🚀 Deploying changed apps to production"
        python scripts/ci_deploy.py --mode changed --connection streamlit_env
        echo "✅ Production deployment completed!"

  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && needs.validate.outputs.apps-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
        pip install -r requirements.txt
    
    - name: Deploy changed apps
      run: |
        echo "🚀 Deploying changed apps to development"
        python scripts/ci_deploy.py --mode changed --current-branch develop --connection streamlit_env
        echo "✅ Development deployment completed!"

  deploy-manual:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
        pip install -r requirements.txt
    
    - name: Deploy apps
      run: |
        MODE="${{ github.event.inputs.mode }}"
        APP_NAME="${{ github.event.inputs.app_name }}"
        BRANCH="${{ github.event.inputs.branch }}"
        
        echo "🚀 Manual deployment - Mode: $MODE, App: $APP_NAME, Branch: $BRANCH"
        
        if [ "$MODE" = "single" ] && [ -n "$APP_NAME" ]; then
          python scripts/ci_deploy.py --mode single --app "$APP_NAME" --current-branch "$BRANCH" --connection streamlit_env
        elif [ "$MODE" = "all" ]; then
          python scripts/ci_deploy.py --mode all --current-branch "$BRANCH" --connection streamlit_env
        else
          python scripts/ci_deploy.py --mode changed --current-branch "$BRANCH" --connection streamlit_env
        fi
        
        echo "✅ Manual deployment completed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy-main, deploy-develop, deploy-manual]
    if: always() && (needs.deploy-main.result != 'skipped' || needs.deploy-develop.result != 'skipped' || needs.deploy-manual.result != 'skipped')
    
    steps:
    - name: Deployment Summary
      run: |
        echo "## 🚀 Streamlit Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.deploy-main.result }}" == "success" ]]; then
          echo "✅ **Production deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-main.result }}" == "failure" ]]; then
          echo "❌ **Production deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy-develop.result }}" == "success" ]]; then
          echo "✅ **Development deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-develop.result }}" == "failure" ]]; then
          echo "❌ **Development deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy-manual.result }}" == "success" ]]; then
          echo "✅ **Manual deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-manual.result }}" == "failure" ]]; then
          echo "❌ **Manual deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changed Apps" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.validate.outputs.apps-list }}" >> $GITHUB_STEP_SUMMARY 